---

# - name: upload gcp credentials
#   copy:
#     src: inventory/gcloud_vault.json
#     dest: inventory/gcloud.json
#     decrypt: yes
#     mode: 0600


# - name : Google cloud auth
#   ansible.builtin.command: gcloud auth activate-service-account --key-file=inventory/gcloud.json


# - name: Set project
#   ansible.builtin.command: gcloud config set project my-project


# - name: Connect to the cluster (update kubeconfig)"
#   shell: gcloud container clusters get-credentials  --project="{{ gcp_project}}"  --zone="{{ gcp_zone }}"  ascn-cluster


- name: Create a k8s namespace
  kubernetes.core.k8s:
    name: ghost
    api_version: v1
    kind: Namespace
    state: present


- name: Create Persistent Volume
  kubernetes.core.k8s:
    state: present
    src: mysql/persistent-volume.yml
    namespace: ghost

- name: MySQL Deployment
  kubernetes.core.k8s:
    state: present
    src: mysql/mysql-deployment.yml
    namespace: ghost

- name: Persistent Volume Claim
  kubernetes.core.k8s:
    state: present
    src: mysql/mysql-pvc.yml
    namespace: ghost

- name: MySQL Service
  kubernetes.core.k8s:
    state: present
    src: mysql/mysql-service.yml 
    namespace: ghost 

- name: Search for all Pods labelled app=web
  kubernetes.core.k8s_info:
    kind: Pod
    label_selectors:
      - app = mysql
  register: mysql_pod

- name: Debug Mysql Pod
  ansible.builtin.debug:
    msg: "{{ mysql_pod.resources[0].metadata.name }}"

# - name: Get Mysql Pod Name
#   ansible.builtin.shell: kubectl get pods -l app=mysql -o jsonpath='{.items[0].metadata.name}'
#   register: mysql_pod_name

# - name: Debug Mysql Pod Name
#   ansible.builtin.debug:
#     msg: "{{ mysql_pod_name.stdout }}"


- name: Calculate Hash da password with python
  ansible.builtin.command: python3 -c 'import bcrypt; print(bcrypt.hashpw(b"{{ admin_pass }}", bcrypt.gensalt(rounds=10)).decode("ascii"))'
  register: hash_pass

- name: Replace $ with \$ in hash_pass
  ansible.builtin.command: python3 -c 'x="{{ hash_pass.stdout }}".replace("$","\$");print(x)'
  register: hash_pass

- name: Debug Hash da password
  ansible.builtin.debug:
    msg: "{{ hash_pass.stdout }}"


- name: Ghost Deployment
  kubernetes.core.k8s:
    state: present
    src: ghost/ghost-deployment.yml
    namespace: ghost


- name: Ghost Service
  kubernetes.core.k8s:
    state: present
    src: ghost/ghost-service.yml
    namespace: ghost


# - name: Wait for ghost service to be ready
#   kubernetes.core.k8s:
#     wait: yes
#     wait_timeout: 600
#     wait_condition:
#       type: Service
#       status: "True"
#       reason: Ready


- name: Wait for mysql service to be ready
  kubernetes.core.k8s_info:
    kind: Pod
    label_selectors:
      - app = mysql
  register: mysql_pod
  until: mysql_pod.resources[0].status.phase == "Running"
  retries: 10


- name: Wait for ghost service to be ready
  kubernetes.core.k8s_info:
    kind: Pod
    label_selectors:
      - app = ghost
  register: ghost_pod
  until: ghost_pod.resources[0].status.phase == "Running"
  retries: 10

- name: debug ghost pod
  ansible.builtin.debug:
    msg: "{{ ghost_pod.resources[0].metadata.name }}"

- name: Check if there are users in database
  kubernetes.core.k8s_exec:
    namespace: ghost
    pod: "{{ mysql_pod.resources[0].metadata.name}}"
    container: mysql
    command: mysql -u'ghostuser' -p'password' -e "use ghost;select * from users;"
  register: result
  until : result.stdout != ""
  retries: 10

- name: Debug result
  ansible.builtin.debug:
    msg: "{{ result.stdout }}"

- name: Update user admin credentials in database
  kubernetes.core.k8s_exec:
    namespace: ghost
    pod: "{{ mysql_pod.resources[0].metadata.name }}"
    container: mysql
    command: mysql -u'ghostuser' -p'password' -e "use ghost;update users set name='{{ admin_name }}', password='{{ hash_pass.stdout }}', email='{{ admin_email }}', status='active' where id=1;"



- name: Wait for the host to be reachable
  wait_for:
    host: "{{ ghost_ip }}"
    port: "{{ ghost_port }}"
    timeout: 600